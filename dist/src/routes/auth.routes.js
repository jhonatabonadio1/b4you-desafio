"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRoutes = void 0;
const express_1 = require("express");
const AuthUserController_1 = require("../controllers/AuthUserController");
const CreateUserController_1 = require("../controllers/CreateUserController");
const UpdateUserController_1 = require("../controllers/UpdateUserController");
const FetchUserController_1 = require("../controllers/FetchUserController");
const DeleteUserController_1 = require("../controllers/DeleteUserController");
const FetchUsersController_1 = require("../controllers/FetchUsersController");
const VerifyAuthMatriculaController_1 = require("../controllers/VerifyAuthMatriculaController");
const CreatePrestadorController_1 = require("../controllers/CreatePrestadorController");
const ensureIsAdmin_1 = require("../middlewares/ensureIsAdmin");
const UpdatePrestadorController_1 = require("../controllers/UpdatePrestadorController");
const FetchPrestadorController_1 = require("../controllers/FetchPrestadorController");
const DeletePrestadorController_1 = require("../controllers/DeletePrestadorController");
const FetchPrestadoresController_1 = require("../controllers/FetchPrestadoresController");
const AuthAdminController_1 = require("../controllers/AuthAdminController");
const FetchAdminController_1 = require("../controllers/FetchAdminController");
const CreateInformativoController_1 = require("../controllers/CreateInformativoController");
const UpdateInformativoController_1 = require("../controllers/UpdateInformativoController");
const DeleteInformativoController_1 = require("../controllers/DeleteInformativoController");
const FetchInformativoController_1 = require("../controllers/FetchInformativoController");
const FetchInformativosController_1 = require("../controllers/FetchInformativosController");
const CreateBrindeController_1 = require("../controllers/CreateBrindeController");
const UpdateBrindeController_1 = require("../controllers/UpdateBrindeController");
const DeleteBrindeController_1 = require("../controllers/DeleteBrindeController");
const FetchBrindeController_1 = require("../controllers/FetchBrindeController");
const FetchBrindesController_1 = require("../controllers/FetchBrindesController");
const FetchUsuarioBrindesController_1 = require("../controllers/FetchUsuarioBrindesController");
const ensureIsAuthenticated_1 = require("../middlewares/ensureIsAuthenticated");
const FetchConveniosController_1 = require("../controllers/FetchConveniosController");
const FetchConvenioController_1 = require("../controllers/FetchConvenioController");
const UpdateConveniosController_1 = require("../controllers/UpdateConveniosController");
const DeleteConvenioController_1 = require("../controllers/DeleteConvenioController");
const CreateConvenioController_1 = require("../controllers/CreateConvenioController");
const FetchUsuarioInformativos_1 = require("../controllers/FetchUsuarioInformativos");
const FetchUsuarioConvenios_1 = require("../controllers/FetchUsuarioConvenios");
const CreateVehicleController_1 = require("../controllers/CreateVehicleController");
const UpdateUserVehicleController_1 = require("../controllers/UpdateUserVehicleController");
const FetchUserVehicleController_1 = require("../controllers/FetchUserVehicleController");
const FetchUserVehiclesController_1 = require("../controllers/FetchUserVehiclesController");
const DeleteUserVehicleController_1 = require("../controllers/DeleteUserVehicleController");
const UpdateVehicleController_1 = require("../controllers/UpdateVehicleController");
const FetchVehicleController_1 = require("../controllers/FetchVehicleController");
const FetchVehiclesController_1 = require("../controllers/FetchVehiclesController");
const DeleteVehicleController_1 = require("../controllers/DeleteVehicleController");
const CreateProductController_1 = require("../controllers/CreateProductController");
const FetchProductsController_1 = require("../controllers/FetchProductsController");
const DeleteProductController_1 = require("../controllers/DeleteProductController");
const FetchUserProductsController_1 = require("../controllers/FetchUserProductsController");
const FetchProductPrestadoresController_1 = require("../controllers/FetchProductPrestadoresController");
const CreateAgendamentoController_1 = require("../controllers/CreateAgendamentoController");
const FetchUserAgendamentosController_1 = require("../controllers/FetchUserAgendamentosController");
const FetchAgendamentosController_1 = require("../controllers/FetchAgendamentosController");
const DeleteAgendamentoController_1 = require("../controllers/DeleteAgendamentoController");
const DeleteAgendamentoUserController_1 = require("../controllers/DeleteAgendamentoUserController");
const FetchStoreAgendamentosController_1 = require("../controllers/FetchStoreAgendamentosController");
const DeleteAgendamentoStoreController_1 = require("../controllers/DeleteAgendamentoStoreController");
const ReadQrCodeController_1 = require("../controllers/ReadQrCodeController");
const ValidaQrCodeController_1 = require("../controllers/ValidaQrCodeController");
const FetchStoreValidationsController_1 = require("../controllers/FetchStoreValidationsController");
const FetchAvaliacoesPendentesController_1 = require("../controllers/FetchAvaliacoesPendentesController");
const AvaliaAtendimentoController_1 = require("../controllers/AvaliaAtendimentoController");
const FetchStoreAvaliacoesController_1 = require("../controllers/FetchStoreAvaliacoesController");
const FetchAdminAvaliacoesController_1 = require("../controllers/FetchAdminAvaliacoesController");
const UploadUserAvatarController_1 = require("../controllers/UploadUserAvatarController");
const FetchAdminValidacoesBrindeController_1 = require("../controllers/FetchAdminValidacoesBrindeController");
const FetchAdminValidacoesController_1 = require("../controllers/FetchAdminValidacoesController");
const GetServiceInfoController_1 = require("../controllers/GetServiceInfoController");
const CreateAdminAgendamentoController_1 = require("../controllers/CreateAdminAgendamentoController");
const FetchAdminUserVehiclesController_1 = require("../controllers/FetchAdminUserVehiclesController");
const UploadCargaController_1 = require("../controllers/UploadCargaController");
const FetchCargaController_1 = require("../controllers/FetchCargaController");
const upload_1 = require("../middlewares/upload");
const FetchMemberExistsController_1 = require("../controllers/FetchMemberExistsController");
const DeleteCargaController_1 = require("../controllers/DeleteCargaController");
const CreateUserCargaController_1 = require("../controllers/CreateUserCargaController");
const UpdateProductController_1 = require("../controllers/UpdateProductController");
const FetchPrestadorHorariosController_1 = require("../controllers/FetchPrestadorHorariosController");
const CreatePrestadorHorariosController_1 = require("../controllers/CreatePrestadorHorariosController");
const DeletePrestadorHorariosController_1 = require("../controllers/DeletePrestadorHorariosController");
const authRoutes = (0, express_1.Router)();
exports.authRoutes = authRoutes;
const verifyAuthMatriculaController = new VerifyAuthMatriculaController_1.VerifyAuthMatriculaController();
const authUserController = new AuthUserController_1.AuthUserController();
const createUserController = new CreateUserController_1.CreateUserController();
const updateUserController = new UpdateUserController_1.UpdateUserController();
const fetchUserController = new FetchUserController_1.FetchUserController();
const deleteUserController = new DeleteUserController_1.DeleteUserController();
const fetchUsersController = new FetchUsersController_1.FetchUsersController();
const createPrestadorController = new CreatePrestadorController_1.CreatePrestadorController();
const updatePrestadorController = new UpdatePrestadorController_1.UpdatePrestadorController();
const fetchPrestadorController = new FetchPrestadorController_1.FetchPrestadorController();
const deletePrestadorController = new DeletePrestadorController_1.DeletePrestadorController();
const fetchPrestadoresController = new FetchPrestadoresController_1.FetchPrestadoresController();
const authAdminController = new AuthAdminController_1.AuthAdminController();
const fetchAdminController = new FetchAdminController_1.FetchAdminController();
const createInformativoController = new CreateInformativoController_1.CreateInformativoController();
const updateInformativoController = new UpdateInformativoController_1.UpdateInformativoController();
const deleteInformativoController = new DeleteInformativoController_1.DeleteInformativoController();
const fetchInformativoController = new FetchInformativoController_1.FetchInformativoController();
const fetchInformativosController = new FetchInformativosController_1.FetchInformativosController();
const createBrindeController = new CreateBrindeController_1.CreateBrindeController();
const updateBrindeController = new UpdateBrindeController_1.UpdateBrindeController();
const deleteBrindeController = new DeleteBrindeController_1.DeleteBrindeController();
const fetchBrindeController = new FetchBrindeController_1.FetchBrindeController();
const fetchBrindesController = new FetchBrindesController_1.FetchBrindesController();
const fetchUsuarioBrindesController = new FetchUsuarioBrindesController_1.FetchUsuarioBrindesController();
const fetchUsuarioConveniosController = new FetchUsuarioConvenios_1.FetchUsuarioConveniosController();
const fetchUsuarioInformativosController = new FetchUsuarioInformativos_1.FetchUsuarioInformativosController();
const createConvenioController = new CreateConvenioController_1.CreateConvenioController();
const updateConvenioController = new UpdateConveniosController_1.UpdateConvenioController();
const deleteConvenioController = new DeleteConvenioController_1.DeleteConvenioController();
const fetchConvenioController = new FetchConvenioController_1.FetchConvenioController();
const fetchConveniosController = new FetchConveniosController_1.FetchConveniosController();
const createVehicleController = new CreateVehicleController_1.CreateVehicleController();
const updateUserVehicleController = new UpdateUserVehicleController_1.UpdateUserVehicleController();
const fetchUserVehicleController = new FetchUserVehicleController_1.FetchUserVehicleController();
const fetchUserVehiclesController = new FetchUserVehiclesController_1.FetchUserVehiclesController();
const deleteUserVehicleController = new DeleteUserVehicleController_1.DeleteUserVehicleController();
const updateVehicleController = new UpdateVehicleController_1.UpdateVehicleController();
const fetchVehicleController = new FetchVehicleController_1.FetchVehicleController();
const fetchVehiclesController = new FetchVehiclesController_1.FetchVehiclesController();
const deleteVehicleController = new DeleteVehicleController_1.DeleteVehicleController();
const createProductController = new CreateProductController_1.CreateProductController();
const updateProductController = new UpdateProductController_1.UpdateProductController();
const fetchProductsController = new FetchProductsController_1.FetchProductsController();
const deleteProductController = new DeleteProductController_1.DeleteProductController();
const fetchUserProductsController = new FetchUserProductsController_1.FetchUserProductsController();
const fetchProductPrestadoresController = new FetchProductPrestadoresController_1.FetchProductPrestadoresController();
const createAgendamentoController = new CreateAgendamentoController_1.CreateAgendamentoController();
const fetchUserAgendamentosController = new FetchUserAgendamentosController_1.FetchUserAgendamentosController();
const fetchStoreAgendamentosController = new FetchStoreAgendamentosController_1.FetchStoreAgendamentosController();
const fetchAgendamentosController = new FetchAgendamentosController_1.FetchAgendamentosController();
const deleteAgendamentoController = new DeleteAgendamentoController_1.DeleteAgendamentoController();
const deleteAgendamentoUserController = new DeleteAgendamentoUserController_1.DeleteAgendamentoUserController();
const deleteAgendamentoStoreController = new DeleteAgendamentoStoreController_1.DeleteAgendamentoStoreController();
const readQrCodeController = new ReadQrCodeController_1.ReadQrCodeController();
const validaQrCodeController = new ValidaQrCodeController_1.ValidaQrCodeController();
const fetchStoreValidationsController = new FetchStoreValidationsController_1.FetchStoreValidationsController();
const fetchAvaliacoesPendentesController = new FetchAvaliacoesPendentesController_1.FetchAvaliacoesPendentesController();
const avaliaAtendimentoController = new AvaliaAtendimentoController_1.AvaliaAtendimentoController();
const fetchStoreAvaliacoesController = new FetchStoreAvaliacoesController_1.FetchStoreAvaliacoesController();
const fetchAdminAvaliacoesController = new FetchAdminAvaliacoesController_1.FetchAdminAvaliacoesController();
const uploadUserAvatarController = new UploadUserAvatarController_1.UploadUserAvatarController();
const fetchAdminValidacoesBrindesController = new FetchAdminValidacoesBrindeController_1.FetchAdminValidacoesBrindesController();
const fetchAdminValidacoesController = new FetchAdminValidacoesController_1.FetchAdminValidacoesController();
const getServiceInfoController = new GetServiceInfoController_1.GetServiceInfoController();
const createAdminAgendamentoController = new CreateAdminAgendamentoController_1.CreateAdminAgendamentoController();
const fetchAdminUserVehiclesController = new FetchAdminUserVehiclesController_1.FetchAdminUserVehiclesController();
const uploadCargaController = new UploadCargaController_1.UploadCargaController();
const fetchCargaController = new FetchCargaController_1.FetchCargaController();
const fetchMemberExistsController = new FetchMemberExistsController_1.FetchMemberExistsController();
const deleteCargaController = new DeleteCargaController_1.DeleteCargaController();
const createUserCargaController = new CreateUserCargaController_1.CreateUserCargaController();
const fetchPrestadorHorariosController = new FetchPrestadorHorariosController_1.FetchPrestadorHorariosController();
const createPrestadorHorariosController = new CreatePrestadorHorariosController_1.CreatePrestadorHorariosController();
const deletePrestadorHorariosController = new DeletePrestadorHorariosController_1.DeletePrestadorHorariosController();
authRoutes.post('/admin/users', ensureIsAdmin_1.ensureIsAdmin, createUserController.handle);
authRoutes.post('/users', createUserCargaController.handle);
authRoutes.put('/admin/users/:usuarioId', ensureIsAdmin_1.ensureIsAdmin, updateUserController.handle);
authRoutes.get('/admin/users/:usuarioId', ensureIsAdmin_1.ensureIsAdmin, fetchUserController.handle);
authRoutes.delete('/admin/users/:usuarioId', ensureIsAdmin_1.ensureIsAdmin, deleteUserController.handle);
authRoutes.get('/admin/users', ensureIsAdmin_1.ensureIsAdmin, fetchUsersController.handle);
authRoutes.post('/admin/prestadores', ensureIsAdmin_1.ensureIsAdmin, createPrestadorController.handle);
authRoutes.put('/admin/prestadores/:prestadorId', ensureIsAdmin_1.ensureIsAdmin, updatePrestadorController.handle);
authRoutes.delete('/admin/prestadores/:prestadorId', ensureIsAdmin_1.ensureIsAdmin, deletePrestadorController.handle);
authRoutes.get('/admin/prestadores', ensureIsAdmin_1.ensureIsAdmin, fetchPrestadoresController.handle);
authRoutes.post('/sessions', authUserController.handle);
authRoutes.post('/verificaLogin', verifyAuthMatriculaController.handle);
authRoutes.get('/admin/prestadores/:prestadorId', ensureIsAdmin_1.ensureIsAdmin, fetchPrestadorController.handle);
authRoutes.post('/admin/sessions', authAdminController.handle);
authRoutes.get('/admin/me', ensureIsAdmin_1.ensureIsAdmin, fetchAdminController.handle);
authRoutes.post('/admin/informativos', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    createInformativoController.handle(req, res);
});
authRoutes.delete('/admin/informativos/:id', ensureIsAdmin_1.ensureIsAdmin, deleteInformativoController.handle);
authRoutes.put('/admin/informativos/:id', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    updateInformativoController.handle(req, res);
});
authRoutes.get('/admin/informativos', ensureIsAdmin_1.ensureIsAdmin, fetchInformativosController.handle);
authRoutes.get('/admin/informativos/:id', ensureIsAdmin_1.ensureIsAdmin, fetchInformativoController.handle);
authRoutes.post('/admin/brindes', ensureIsAdmin_1.ensureIsAdmin, createBrindeController.handle);
authRoutes.delete('/admin/brindes/:id', ensureIsAdmin_1.ensureIsAdmin, deleteBrindeController.handle);
authRoutes.put('/admin/brindes/:id', ensureIsAdmin_1.ensureIsAdmin, updateBrindeController.handle);
authRoutes.get('/admin/brindes', ensureIsAdmin_1.ensureIsAdmin, fetchBrindesController.handle);
authRoutes.get('/admin/brindes/:id', ensureIsAdmin_1.ensureIsAdmin, fetchBrindeController.handle);
authRoutes.get('/brindes', ensureIsAuthenticated_1.ensureAuthenticated, fetchUsuarioBrindesController.handle);
authRoutes.get('/convenios', ensureIsAuthenticated_1.ensureAuthenticated, fetchUsuarioConveniosController.handle);
authRoutes.get('/informativos', ensureIsAuthenticated_1.ensureAuthenticated, fetchUsuarioInformativosController.handle);
authRoutes.post('/admin/convenios', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    createConvenioController.handle(req, res);
});
authRoutes.delete('/admin/convenios/:id', ensureIsAdmin_1.ensureIsAdmin, deleteConvenioController.handle);
authRoutes.put('/admin/convenios/:id', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    updateConvenioController.handle(req, res);
});
authRoutes.get('/admin/convenios', ensureIsAdmin_1.ensureIsAdmin, fetchConveniosController.handle);
authRoutes.get('/admin/convenios/:id', ensureIsAdmin_1.ensureIsAdmin, fetchConvenioController.handle);
authRoutes.post('/veiculos', ensureIsAuthenticated_1.ensureAuthenticated, createVehicleController.handle);
authRoutes.put('/veiculos/:vehicleId', ensureIsAuthenticated_1.ensureAuthenticated, updateUserVehicleController.handle);
authRoutes.delete('/veiculos/:vehicleId', ensureIsAuthenticated_1.ensureAuthenticated, deleteUserVehicleController.handle);
authRoutes.get('/veiculos/:vehicleId', ensureIsAuthenticated_1.ensureAuthenticated, fetchUserVehicleController.handle);
authRoutes.get('/veiculos', ensureIsAuthenticated_1.ensureAuthenticated, fetchUserVehiclesController.handle);
authRoutes.put('/admin/veiculos/:vehicleId', ensureIsAdmin_1.ensureIsAdmin, updateVehicleController.handle);
authRoutes.delete('/admin/veiculos/:vehicleId', ensureIsAdmin_1.ensureIsAdmin, deleteVehicleController.handle);
authRoutes.get('/admin/veiculos/:vehicleId', ensureIsAdmin_1.ensureIsAdmin, fetchVehicleController.handle);
authRoutes.get('/admin/veiculos', ensureIsAdmin_1.ensureIsAdmin, fetchVehiclesController.handle);
authRoutes.post('/admin/servicos', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    createProductController.handle(req, res);
});
authRoutes.put('/admin/servicos/:id', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    updateProductController.handle(req, res);
});
authRoutes.get('/admin/servicos', ensureIsAdmin_1.ensureIsAdmin, fetchProductsController.handle);
authRoutes.delete('/admin/servicos/:produtoId', ensureIsAdmin_1.ensureIsAdmin, deleteProductController.handle);
authRoutes.get('/servicos', ensureIsAuthenticated_1.ensureAuthenticated, fetchUserProductsController.handle);
authRoutes.get('/servicos/:produtoId/prestadores', ensureIsAuthenticated_1.ensureAuthenticated, fetchProductPrestadoresController.handle);
authRoutes.post('/agendamento', ensureIsAuthenticated_1.ensureAuthenticated, createAgendamentoController.handle);
authRoutes.get('/agendamentos', ensureIsAuthenticated_1.ensureAuthenticated, fetchUserAgendamentosController.handle);
authRoutes.delete('/agendamentos/:id', ensureIsAuthenticated_1.ensureAuthenticated, deleteAgendamentoUserController.handle);
authRoutes.get('/store/agendamentos', ensureIsAuthenticated_1.ensureAuthenticated, fetchStoreAgendamentosController.handle);
authRoutes.delete('/store/agendamentos/:id', ensureIsAuthenticated_1.ensureAuthenticated, deleteAgendamentoStoreController.handle);
authRoutes.get('/admin/agendamentos', ensureIsAdmin_1.ensureIsAdmin, fetchAgendamentosController.handle);
authRoutes.delete('/admin/agendamentos/:id', ensureIsAdmin_1.ensureIsAdmin, deleteAgendamentoController.handle);
authRoutes.get('/dadosAgendamento', ensureIsAuthenticated_1.ensureAuthenticated, readQrCodeController.handle);
authRoutes.post('/validaQrCode', ensureIsAuthenticated_1.ensureAuthenticated, validaQrCodeController.handle);
authRoutes.get('/validacoes', ensureIsAuthenticated_1.ensureAuthenticated, fetchStoreValidationsController.handle);
authRoutes.get('/avaliacoes', ensureIsAuthenticated_1.ensureAuthenticated, fetchAvaliacoesPendentesController.handle);
authRoutes.post('/avaliaLoja/:id', ensureIsAuthenticated_1.ensureAuthenticated, avaliaAtendimentoController.handle);
authRoutes.get('/store/avaliacoes', ensureIsAuthenticated_1.ensureAuthenticated, fetchStoreAvaliacoesController.handle);
authRoutes.get('/admin/avaliacoes', ensureIsAdmin_1.ensureIsAdmin, fetchAdminAvaliacoesController.handle);
authRoutes.get('/admin/validacoes', ensureIsAdmin_1.ensureIsAdmin, fetchAdminValidacoesController.handle);
authRoutes.get('/admin/validacoesBrindes', ensureIsAdmin_1.ensureIsAdmin, fetchAdminValidacoesBrindesController.handle);
authRoutes.post('/trocaAvatar', ensureIsAuthenticated_1.ensureAuthenticated, upload_1.upload.single('file'), (req, res) => {
    uploadUserAvatarController.handle(req, res);
});
authRoutes.get('/admin/servico/:id', ensureIsAdmin_1.ensureIsAdmin, getServiceInfoController.handle);
authRoutes.get('/admin/servicos/:produtoId/prestadores', ensureIsAdmin_1.ensureIsAdmin, fetchProductPrestadoresController.handle);
authRoutes.post('/admin/agendamentos', ensureIsAdmin_1.ensureIsAdmin, createAdminAgendamentoController.handle);
authRoutes.get('/admin/usuarios/:userId/veiculos', ensureIsAdmin_1.ensureIsAdmin, fetchAdminUserVehiclesController.handle);
authRoutes.post('/admin/cargas', ensureIsAdmin_1.ensureIsAdmin, upload_1.upload.single('file'), (req, res) => {
    uploadCargaController.handle(req, res);
});
authRoutes.get('/admin/cargas', ensureIsAdmin_1.ensureIsAdmin, fetchCargaController.handle);
authRoutes.get('/membro', fetchMemberExistsController.handle);
authRoutes.delete('/admin/cargas/:id', ensureIsAdmin_1.ensureIsAdmin, deleteCargaController.handle);
authRoutes.get('/store/horarios', ensureIsAuthenticated_1.ensureAuthenticated, fetchPrestadorHorariosController.handle);
authRoutes.post('/store/horarios', ensureIsAuthenticated_1.ensureAuthenticated, createPrestadorHorariosController.handle);
authRoutes.delete('/store/horarios', ensureIsAuthenticated_1.ensureAuthenticated, deletePrestadorHorariosController.handle);
