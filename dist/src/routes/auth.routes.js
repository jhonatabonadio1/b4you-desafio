"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRoutes = void 0;
const express_1 = require("express");
const AuthUserController_1 = require("../controllers/AuthUserController");
const CreateUserController_1 = require("../controllers/CreateUserController");
const VerifyAuthMatriculaController_1 = require("../controllers/VerifyAuthMatriculaController");
const CreatePrestadorController_1 = require("../controllers/CreatePrestadorController");
const ensureIsAdmin_1 = require("../middlewares/ensureIsAdmin");
const UpdatePrestadorController_1 = require("../controllers/UpdatePrestadorController");
const ReadPrestadorController_1 = require("../controllers/ReadPrestadorController");
const DeletePrestadorController_1 = require("../controllers/DeletePrestadorController");
const FetchPrestadoresController_1 = require("../controllers/FetchPrestadoresController");
const ensureIsAuthenticated_1 = require("../middlewares/ensureIsAuthenticated");
const AuthAdminController_1 = require("../controllers/AuthAdminController");
const FetchAdminController_1 = require("../controllers/FetchAdminController");
const authRoutes = (0, express_1.Router)();
exports.authRoutes = authRoutes;
const verifyAuthMatriculaController = new VerifyAuthMatriculaController_1.VerifyAuthMatriculaController();
const authUserController = new AuthUserController_1.AuthUserController();
const createUserController = new CreateUserController_1.CreateUserController();
const createPrestadorController = new CreatePrestadorController_1.CreatePrestadorController();
const updatePrestadorController = new UpdatePrestadorController_1.UpdatePrestadorController();
const readPrestadorController = new ReadPrestadorController_1.ReadPrestadorController();
const deletePrestadorController = new DeletePrestadorController_1.DeletePrestadorController();
const fetchPrestadoresController = new FetchPrestadoresController_1.FetchPrestadoresController();
const authAdminController = new AuthAdminController_1.AuthAdminController();
const fetchAdminController = new FetchAdminController_1.FetchAdminController();
authRoutes.post('/users', ensureIsAdmin_1.ensureIsAdmin, createUserController.handle);
authRoutes.post('/sessions', authUserController.handle);
authRoutes.post('/verificaLogin', verifyAuthMatriculaController.handle);
authRoutes.post('/prestadores', ensureIsAdmin_1.ensureIsAdmin, createPrestadorController.handle);
authRoutes.put('/prestadores/:prestadorId', ensureIsAdmin_1.ensureIsAdmin, updatePrestadorController.handle);
authRoutes.get('/prestadores/:prestadorId', ensureIsAuthenticated_1.ensureAuthenticated, readPrestadorController.handle);
authRoutes.delete('/prestadores/:prestadorId', ensureIsAdmin_1.ensureIsAdmin, deletePrestadorController.handle);
authRoutes.get('/prestadores', ensureIsAuthenticated_1.ensureAuthenticated, fetchPrestadoresController.handle);
authRoutes.post('/admin/sessions', authAdminController.handle);
authRoutes.get('/admin/me', ensureIsAdmin_1.ensureIsAdmin, fetchAdminController.handle);
