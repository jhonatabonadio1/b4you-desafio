// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  nome        String    
  matricula   String
  avatarUrl   String?
  email       String
  cpf         String
  phone       String
  birth       DateTime
  password    String
  tipoAcesso  String?   @default("associado")

  agendamentos  Agendamento[]

  brindes  BrindesInPrestadoresEUsuarios[]

  deleted     Boolean   @default(false)
  created_at  DateTime  @default(now())

  @@map("usuarios")
}

model Prestador {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  razaoSocial String    
  avatarUrl   String?
  latitude    Float
  longitude   Float
  inscricao   String
  tipoInscricao   String?     @default("cnpj")
  endereco    String
  cidade      String
  estado      String
  bairro      String
  cep         String
  ativo       Boolean   @default(true)
  password    String
  email       String

  agendamentos Agendamento[]
  servicos     Servico[]

  brindes  BrindesInPrestadoresEUsuarios[]

  deleted     Boolean   @default(false)
  created_at  DateTime  @default(now())

  @@map("prestadores")
}

model Servico {
  id          String      @id @default(uuid()) @map("_id") @db.ObjectId
  nome        String
  imageUrl    String?

  prestador   Prestador   @relation(fields: [prestadorId], references: [id])
  prestadorId String      @db.ObjectId

  agendamentos  Agendamento[]

  ativo       Boolean     @default(true)
  deleted     Boolean     @default(false)
  created_at  DateTime    @default(now())

  @@map("servicos")
}

model Agendamento {
  id          String    @id @default(uuid()) @map("_id") @db.ObjectId

  prestador   Prestador @relation(fields: [prestadorId], references: [id])
  prestadorId String    @db.ObjectId
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId   String    @db.ObjectId

  servico     Servico  @relation(fields: [servicoId], references: [id])
  servicoId   String    @db.ObjectId

  qrcode      String?
  data        DateTime
  ativo       Boolean   @default(true)

  deleted     Boolean   @default(false)
  created_at  DateTime  @default(now())

  @@map("agendamentos")
}

model Brinde{
  id      String    @id @default(uuid()) @map("_id") @db.ObjectId
  nome    String 

  qrcode      String?
  dataLimite        DateTime

  prestadores  BrindesInPrestadoresEUsuarios[]

  ativo       Boolean   @default(true)
  created_at  DateTime  @default(now())
}

model BrindesInPrestadoresEUsuarios{
  brinde      Brinde  @relation(fields: [brindeId], references: [id])
  brindeId    String @db.ObjectId @map("_id")

  prestador   Prestador  @relation(fields: [prestadorId], references: [id])
  prestadorId String @db.ObjectId
  
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   String @db.ObjectId
  
  @@id([brindeId])
}

model Informativos {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  titulo      String
  texto       String?
  bannerUrl   String?
  url         String?

  deleted     Boolean     @default(false)
  created_at  DateTime    @default(now())

  @@map("informativos")
}


model Convenios {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  titulo      String
  texto       String?
  bannerUrl   String
  url         String
  html        String?
  categoria   String

  deleted     Boolean     @default(false)
  created_at  DateTime    @default(now())

  @@map("convenios")
}