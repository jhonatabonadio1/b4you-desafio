generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  email            String  @unique
  password         String
  firstName        String
  lastName         String
  empresa          String?
  confirmedAccount Boolean @default(false)

  stripeCustomerId String

  subscription Subscription?
  pdfs         Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payment          Payment[]
  RecoveryRequests RecoveryRequests[]
  CheckoutSession  CheckoutSession[]

  @@map("users")
}

model RecoveryRequests {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  valid     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recovery_requests")
}

model Subscription {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  stripeSubscriptionId String?

  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String @db.ObjectId

  status String  // Ativa, Cancelada, Expirada

  startDate DateTime  @default(now())
  endDate   DateTime?

  active Boolean @default(false) // Apenas uma assinatura ativa por usuário

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  stripeProductId String?

  name String
  description String?
  order Int?

  monthlyPriceId String
  annualPriceId  String

  limit        Int @default(0)
  uploadFiles  Int @default(0)
  maxSize      Int @default(0)
  fileSessions Int @default(0)

  active Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featured Boolean @default(false)

  Subscription Subscription[]

  @@map("plans")
}

model Document {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  s3Key       String
  iframe      String
  sizeInBytes Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LoteHeatmaps LoteHeatmaps[]
  Session      Session[]

  @@map("documents")
}

model Payment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  stripeInvoiceId String?
  stripePaymentIntentId String?
  amount          Int
  status          String  // paid, failed, pending
  currency        String
  userId          String?  @db.ObjectId
  user            User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  failureReason   String?  // Se falhou, armazenar motivo
  retryCount      Int @default(0) // Quantas vezes tentou processar
  lastAttemptAt   DateTime? // Última tentativa de pagamento

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  docId    String   @db.ObjectId
  document Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  fingerprint String

  country    String?
  city       String?
  network    String?
  geoname_id String?

  collectedHeatmap Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LoteHeatmaps LoteHeatmaps[]
  PageView     PageView[]

  @@map("sessions")
}

model LoteHeatmaps {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionId String  @db.ObjectId
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  docId    String   @db.ObjectId
  document Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  fingerprint String?
  Heatmaps    Heatmaps[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lotes_heatmaps")
}

model Heatmaps {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  loteId String       @db.ObjectId
  lote   LoteHeatmaps @relation(fields: [loteId], references: [id], onDelete: Cascade)

  x     Float
  y     Float
  value Float
  page  Int

  pageWidth  Float
  pageHeight Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("heatmaps")
}

model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionId String  @db.ObjectId
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  pageNumber      Int
  interactionTime Float
  viaWebsocket    Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_views")
}

model Blacklist {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  empresa String?

  ip String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blacklist")
}

model AdminUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

model CheckoutSession {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  ip String?

  userId          String?  @db.ObjectId
  user            User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  success_url       String?
  cancel_url        String?
  priceId           String
  mode              String
  quantity          Int
  sessionUrl        String?
  checkoutSessionId String?

  status String  // completed, expired, canceled

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
