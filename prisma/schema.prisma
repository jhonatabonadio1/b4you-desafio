generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String
  firstName String
  lastName  String
  empresa   String?

  stripeCustomerId String?

  subscription Subscription?
  pdfs         Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payment Payment[]

  @@map("users")
}

model Subscription {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  stripeSubscriptionId String?

  plan   Plan?   @relation(fields: [planId], references: [id])
  planId String? @db.ObjectId

  status String

  startDate DateTime  @default(now())
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  monthlyPrice Float?
  annualPrice  Float?

  monthlyPriceId String?
  annualPriceId  String?

  pdfLimit     Int
  storageLimit Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Subscription Subscription[]

  @@map("plans")
}

model Document {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  s3Key       String
  iframe      String
  sizeInBytes Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LoteHeatmaps LoteHeatmaps[]

  @@map("documents")
}

model Payment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  stripeInvoiceId String
  amount          Int
  status          String
  currency        String
  userId          String @db.ObjectId
  user            User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model LoteHeatmaps {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  docId    String   @db.ObjectId
  document Document @relation(fields: [docId], references: [id])


  fingerprint String?
  Heatmaps    Heatmaps[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lotes_heatmaps")
}

model Heatmaps {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  loteId String       @db.ObjectId
  lote   LoteHeatmaps @relation(fields: [loteId], references: [id])

  x     Float
  y     Float
  value Float
  page  Int

  pageWidth  Float
  pageHeight Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("heatmaps")
}
