generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ImovelsCondominium {
  academia           Boolean
  elevador           Boolean
  lavanderiaColetiva Boolean
  piscina            Boolean
  playground         Boolean
  portaria24hrs      Boolean
  salaoDeFesta       Boolean
  sauna              Boolean
}

type ImovelsDetails {
  armariosPlanejados Boolean
  churrasqueira      Boolean
  closet             Boolean
  mobiliado          Boolean
  piscina            Boolean
  quintal            Boolean
  suite              Boolean
  varanda            Boolean
}

type ImovelsMetragens {
  value String
}

type PropertiesCidades {
  value String
}

type PropertiesCondominium {
  academia           Boolean
  elevador           Boolean
  lavanderiaColetiva Boolean
  piscina            Boolean
  playground         Boolean
  portaria24hrs      Boolean
  salaoDeFesta       Boolean
  sauna              Boolean
}

type PropertiesDetails {
  armariosPlanejados Boolean
  churrasqueira      Boolean
  closet             Boolean
  mobiliado          Boolean
  piscina            Boolean
  quintal            Boolean
  suite              Boolean
  varanda            Boolean
}

type PropertiesLinks {
  id           String  @map("_id") @db.ObjectId
  encaminhado Boolean
  link        String
  motivo      String
  timestamp   DateTime @db.Date @default(now())
}

type PropertiesMetragens {
  value String
}

type PropertiesPropertyType {
  value String
}

type PropertiesValores {
  value String
}

model envios {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  clientId    String?
  imovelId    String?
  message     String
  phoneNumber String
  timestamp   DateTime @db.Date @default(now())
  user        String
}

model fontes {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  v    Int    @map("__v")
  nome String
}

model imovels {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  v             Int                @map("__v")
  banheiros     Int
  cidade        String
  condominium   ImovelsCondominium
  descricao     String
  details       ImovelsDetails
  garagem       Int
  images        String[]
  imovelCode    String
  metragens     ImovelsMetragens[]
  ownerEmail    String?
  ownerName     String
  ownerPhone    String
  ownerWhatsapp String?
  propertyType  String
  quartos       Int
  state         String
  timestamp   DateTime @db.Date @default(now())
  user          String
  valor         String
  valorComissao String?
  valorCondo    String?
}

model locations {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  v       Int?     @map("__v")
  cidades String[]
  nome    String?
  sigla   String
}

model properties {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  v             Int                      @map("__v")
  banheiros     Int
  cidades       PropertiesCidades[]
  clientCode    String
  clienteFuturo Boolean?
  condominium   PropertiesCondominium
  descricao     String
  details       PropertiesDetails
  encaminhado   Boolean?
  fonte         String?
  garagem       Int
  interessou    Boolean?
  linkImovel    String?
  links         PropertiesLinks[]
  metragens     PropertiesMetragens[]
  nome          String?
  paymentMethod String
  propertyType  PropertiesPropertyType[]
  quartos       Int
  state         String
  timestamp   DateTime @db.Date @default(now())
  user          String
  valores       PropertiesValores[]
}

model tipos {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  v    Int    @map("__v")
  nome String
}

model users {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  v        Int    @map("__v")
  email    String @unique(map: "email_1")
  nome     String
  password String
  role     String
}
